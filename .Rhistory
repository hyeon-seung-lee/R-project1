#seoul_flow_18 <- left_join(us_state, flow2018.xlsx, by = c('region'='state'))
#seoul_flow_19 <- left_join(us_state, flow2019.xlsx, by = c('region'='state'))
seoul_map_ggplot
ggplot()+geom_polygon(data = flow19, aes(x = long, y = lat, fill = tot_flpop_co, alpha = 0.3))
flow17 <- read.csv(file = 'flowdata/flow201417_coord.csv')
flow18 <- read.csv(file = 'flowdata/flow2018_coord.csv')
flow19 <- read.csv(file = 'flowdata/flow2019_coord.csv')
ggplot()+geom_polygon(data = flow19, aes(x = long, y = lat, fill = tot_flpop_co, alpha = 0.3))
#두 데이터 합해야하나?
#seoul_flow_1417 <- left_join(flow, flow201417.xlsx, by = c('region'='state'))
#seoul_flow_18 <- left_join(us_state, flow2018.xlsx, by = c('region'='state'))
#seoul_flow_19 <- left_join(us_state, flow2019.xlsx, by = c('region'='state'))
seoul_map_ggplot
library(ggmap)
# google map 이용
library('ggmap')
register_google(key='AIzaSyBQsv4dm2o6hBfchlPQDMpMyRdkLsk-3k8') # 부여받은 키 등록
cen <- c(mean(flow19$long),mean(flow19$lat))
View(flow17)
get_map(location = '서울',
zoom = 14,
maptype = 'roadmap',
source = 'google') %>%
ggmap()
# littlemissdata.com 시작
install.packages("lubridate")
install.packages("data.table")
install.packages("ggrepel")
install.packages("data.table")
install.packages("tidyverse")
install.packages("data.table")
install_github('https://github.com/Rdatatable/data.table')
library(data.table)
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
# google map 이용
rm(seoul_map_ggplot)
sgm     <- get_googlemap(center=cen,
maptype="roadmap",
zoom=10,
size=c(640,640),
marker=gc)
library('ggmap')
sgm     <- get_googlemap(center=cen,
maptype="roadmap",
zoom=10,
size=c(640,640),
marker=gc)
register_google(key='AIzaSyBQsv4dm2o6hBfchlPQDMpMyRdkLsk-3k8') # 부여받은 키 등록
cen <- c(mean(flow19$long),mean(flow19$lat))
sgm     <- get_googlemap(center=cen,
maptype="roadmap",
zoom=10,
size=c(640,640),
marker=gc)
sgm     <-ggmap( get_googlemap(center=cen,
maptype="terrain",
zoom=10,
size=c(640,640),
color = color))
sgm     <-ggmap( get_googlemap(center=cen,
maptype="terrain",
zoom=10,
size=c(640,640),
color = 'color'))
sgm
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat,  colour = Initial.Type.Group), data = flow19$tot_flpop_co, size = 0.5) +
theme(legend.position="bottom")
flow17 <- as.data.frame(flow17)
flow18 <- as.data.frame(flow18)
flow19 <- as.data.frame(flow19)
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat,  colour = Initial.Type.Group), data = flow19$tot_flpop_co, size = 0.5) +
theme(legend.position="bottom")
str(flow19)
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat,  colour = Initial.Type.Group), data = flow19$tot_flpop_co, size = 0.5) +
theme(legend.position="bottom")
flow19_tot_flpop <- as.data.frame(flow19$tot_flpop_co)
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat,  colour = Initial.Type.Group), data = flow19_tot_flpop, size = 0.5) +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 0.5) +
theme(legend.position="bottom")
flow19_tot_flpop <- flow19 %>% filter(tot_flpop_co&long&lat)
head(flow19_tot_flpop)
flow19_tot_flpop <-
flow19 %>% select(tot_flpop_co,long,lat)
head(flow19_tot_flpop)
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 0.5) +
theme(legend.position="bottom")
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=10,
size=c(640,640),
color = 'color'))
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=10,
size=c(640,640),
color = 'color'))
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 0.5) +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 0.5, alpha=0.25) +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 1, alpha=0.25) +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 1, alpha=0.25, fill = 'red') +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 1, alpha=0.25, color = 'red') +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 10, alpha=0.25, color = 'red') +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 5, alpha=0.25, color = 'red') +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 3, alpha=0.25, color = 'red') +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 2, alpha=0.25, color = 'red') +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 1, alpha=0.25, color = 'red') +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 1.5, alpha=0.25, color = 'red') +
theme(legend.position="bottom")
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=8,
size=c(640,640),
color = 'color'))
sgm
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=12,
size=c(640,640),
color = 'color'))
sgm
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=15,
size=c(640,640),
color = 'color'))
sgm
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=13,
size=c(640,640),
color = 'color'))
sgm
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=12,
size=c(640,640),
color = 'color'))
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=11,
size=c(640,640),
color = 'color'))
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")
# 웹 크롤링(서울 관광지명 또는 서울 관광지 주소 데이터수집하기)
install.packages('rvest')
seoul_attractions <- read.csv('data/주소/seoul_attractions.csv')
seoul_attractions <- read.csv('data/주소/seoul_attractions.csv')
seoul_attractions <- read.csv('data/주소/seoul_attractions.csv',
encoding = 'UTF-8',
stringsAsFactors = F)
seoul_attractions <- read.csv('data/주소/seoul_attractions.csv',
encoding = 'UTF-8',
stringsAsFactors = F)
library(readxl)
seoul_attractions <- read.csv(file = 'data/주소/seoul_attractions.csv',
encoding = 'UTF-8',
stringsAsFactors = F)
seoul_attractions<- read_excel('data/주소/seoul_attractions.xlsx')
seoul_attractions
seoul_attractions<- read_excel('data/주소/seoul_attractions.xlsx')
seoul_attractions
seoul_attractions %>% filter(!is.na('명소'))
library(dplyr)
seoul_attractions %>% filter(!is.na('명소'))
seoul_attractions %>% filter(is.na('경복궁'))
seoul_attractions<- read_excel('data/주소/seoul_attractions.xlsx')
seoul_attractions
seoul_attractions %>% filter(is.na(attraction))
seoul_attractions %>% filter(!is.na(attraction))
seoul_attractions = seoul_attractions %>% filter(!is.na(attraction))
View(seoul_attractions)
# 평점 항목 제거
seoul_attractions$attraction %>%
str_remove(pattern = '^\"')
library(stringr)
# 평점 항목 제거
seoul_attractions$attraction %>%
str_remove(pattern = '^\"')
# 평점 항목 제거
seoul_attractions$attraction %>%
str_remove(pattern = '^\"\d')
# 평점 항목 제거
seoul_attractions$attraction %>%
str_remove(pattern = '^\"\d+')
# 평점 항목 제거
seoul_attractions$attraction %>%
str_remove(pattern = '\d+')
# 평점 항목 제거
seoul_attractions$attraction %>%
str_remove(pattern = "\d+")
# 평점 항목 제거
seoul_attractions$attraction %>%
str_remove(pattern = \d+)
# 평점 항목 제거
seoul_attractions$attraction %>%
str_remove(pattern = '4+')
# 평점 항목 제거
seoul_attractions$attraction %>%
str_remove(pattern = '\d+')
# 평점 항목 제거
seoul_attractions$attraction %>%
str_remove(pattern = '\n+')
# 평점 항목 제거
seoul_attractions$attraction %>%
str_remove(pattern = '\\d+')
grep('\\d+',seoul_attractions$attraction)
seoul_attractions$attraction[2,1]
str(seoul_attractions)
View(seoul_attractions)
seoul_attractions$attraction[1,]
seoul_attractions$attraction[1,1]
# 평점 항목 제거
seoul_attractions$attraction %>%
filter(%in%'\\d+')
seoul_attractions$attraction[1,1]
seoul_attractions$attraction[1,1,1]
seoul_attractions$attraction[1]
n = grep('\\d+',seoul_attractions$attraction)
seoul_attractions %>% filter(!seoul_attractions[n])
seoul_attractions$attraction[n]
grep('\\d\\.',seoul_attractions$attraction)
n = grep('\\d\\.',seoul_attractions$attraction)
seoul_attractions$attraction[n]
seoul_attractions$attraction[-n]
seoul_attractions <-seoul_attractions$attraction[-n]
seoul_attractions
seoul_attractions[x%%2=0]
seoul_attractions[x%%2==0]
x<- nrow(seoul_attractions)
seoul_attractions[x%%2==0]
x<- ncol(seoul_attractions)
length(seoul_attractions)
x = length(seoul_attractions)
seoul_attractions[x%%2==0]
x%%2
x = c(1:length(seoul_attractions)/2)
x = c(1:(length(seoul_attractions)/2))
x = c(x*2)
seoul_attractions[x]
x = c(x*2-1)
seoul_attractions[x]
x = c(1:(length(seoul_attractions)/2))
x = c(x*2-1)
seoul_attractions[x]
seoul_attractions<-seoul_attractions[x]
seoul_attractions
# 구글 이용한 주소 추출
# 데이터프레임으로 만들기
seoul_attractions <- as.data.frame(seoul_attractions)
geocodeQueryCheck()
library(ggmap)
geocodeQueryCheck()
geocodeQueryCheck()
geocode(location = '서울',
output = 'latlon',
source = 'google')
register_google(key='AIzaSyBQsv4dm2o6hBfchlPQDMpMyRdkLsk-3k8') # 부여받은 키 등록
geocodeQueryCheck()
geocode(location = '서울',
output = 'latlon',
source = 'google')
attSeoulCoords <- geocode(location = seoul_attractions,
output = 'latlona',
source = 'google')
seoul_attractions<- read_excel('data/주소/seoul_attractions.xlsx')
#빈칸 제거
seoul_attractions = seoul_attractions %>% filter(!is.na(attraction))
n = grep('\\d\\.',seoul_attractions$attraction)
seoul_attractions <-seoul_attractions$attraction[-n]
seoul_attractions<-seoul_attractions[x]
seoul_attractions
geocode(location = '서울',
output = 'latlon',
source = 'google')
attSeoulCoords <- geocode(location = seoul_attractions,
output = 'latlona',
source = 'google')
attSeoulCoords
View(attSeoulCoords)
attSeoulCoords[89,]
merge(seoul_attractions,attSeoulCoords, by = 'key')
merge(seoul_attractions,attSeoulCoords)
attSeoulCoords
cbind(seoul_attractions,attSeoulCoords)
View(cbind(seoul_attractions,attSeoulCoords))
att_Seoul_data <- View(cbind(seoul_attractions,attSeoulCoords))
att_Seoul_data <- cbind(seoul_attractions,attSeoulCoords)
write.csv(att_Seoul_data,file = 'data/주소/att_seoul_coord.csv')
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop, size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), , data = att_Seoul_data, size =2.5) +
geom_label_repel(
aes(x, y, label = label),
data=n,
family = 'Times',
size = 4,
box.padding = 0.2, point.padding = 0.3,
segment.color = 'grey50')
library(ggrepel)
library(data.table)
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library(ggmap)
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop,
size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), , data = att_Seoul_data, size =2.5) +
geom_label_repel(
aes(x, y, label = label),
data=n,
family = 'Times',
size = 4,
box.padding = 0.2, point.padding = 0.3,
segment.color = 'grey50')
# 구별 center data 또는 동, 서, 남, 북, 중앙 등의 좌표 데이터
# 주요 관광지 주소와 좌표 데이터
# 상권 주소값 전체에 대한 주소 데이터면 좋음
att_Seoul_df<-as.data.frame(att_Seoul_data)
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop,
size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), data = att_Seoul_df, size =2.5) +
geom_label_repel(
aes(x, y, label = label),
data=n,
family = 'Times',
size = 4,
box.padding = 0.2, point.padding = 0.3,
segment.color = 'grey50')
View(att_Seoul_df)
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop,
size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), data = att_Seoul_df, size =2.5) +
geom_label_repel(
aes(x, y, label = label),
data=att_Seoul_df,
#family = 'Times',
size = 4,
box.padding = 0.2, point.padding = 0.3,
segment.color = 'grey50')
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop,
size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), data = att_Seoul_df, size =2.5) +
geom_label_repel(
aes(x=lon, y=lat),
data=att_Seoul_df,
#family = 'Times',
size = 4,
box.padding = 0.2, point.padding = 0.3,
segment.color = 'grey50')
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop,
size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), data = att_Seoul_df, size =2.5) +
geom_label_repel(
aes(x=lon, y=lat, label = seoul_attractions),
data=att_Seoul_df,
#family = 'Times',
size = 4,
box.padding = 0.2, point.padding = 0.3,
segment.color = 'grey50')
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop,
size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), data = att_Seoul_df, size =2.5) +
geom_label_repel(
aes(x=lon, y=lat, label = seoul_attractions),
data=att_Seoul_df,
#family = 'Times',
size = 2.5,
box.padding = 0.2, point.padding = 0.3,
segment.color = 'grey50')
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop,
size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), data = att_Seoul_df, size =1.5) +
geom_label_repel(
aes(x=lon, y=lat, label = seoul_attractions),
data=att_Seoul_df,
#family = 'Times',
size = 1.5,
box.padding = 0.1, point.padding = 0.1,
segment.color = 'grey50')
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop,
size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), data = att_Seoul_df, size =1.5) +
geom_label_repel(
aes(x=lon, y=lat, label = seoul_attractions),
data=att_Seoul_df,
#family = 'Times',
size = 1.5,
box.padding = 0.2, point.padding = 0.3,
segment.color = 'grey50')
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop,
size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), data = att_Seoul_df, size =1.5) +
geom_label_repel(
aes(x=lon, y=lat, label = seoul_attractions),
data=att_Seoul_df,
#family = 'Times',
size = 2,
box.padding = 0, point.padding = 0,
segment.color = 'grey50')
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=13,
size=c(640,640),
color = 'color'))
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = long, y = lat ), data = flow19_tot_flpop,
size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), data = att_Seoul_df, size =1.5) +
geom_label_repel(
aes(x=lon, y=lat, label = seoul_attractions),
data=att_Seoul_df,
#family = 'Times',
size = 2,
box.padding = 0, point.padding = 0,
segment.color = 'grey50')
rm(list = ls())
flow17_comname<-read.csv(file = 'data/flow201417상권명.csv')
flow18_comname<-read.csv(file = 'data/flow2018상권명.csv')
flow19_comname<-read.csv(file = 'data/flow2019상권명.csv')
flow19_comname<-read_excel('data/flow2019상권명.xlsx')
coords19 <- geocode(location = flow19_comname,
output = 'latlona',
source = 'google')
View(flow19_comname)
coords19 <- geocode(location = flow19_comname$trdar_cd_nm,
output = 'latlona',
source = 'google')
16000/5
num17 = c(1:3200)
16000/500
num17 = c(1:32)
num17 = c(num17*5,16160)
num17
num17 = c(1:32)
num17 = c(num17*500,16160)
num17
4000/500
num18 = c(1:8)
num18 = c(num18*500,4040)
num19 = c(500, 1011)
num18[-32]
num18
num18[-8]
num18 = num18[-8]
num17 = num17[-32]

add19 = read.csv('data/flow2019상권명.csv',
encoding = 'UTF-8')
add19 = read.csv('data/flow2019상권명.csv',
fileEncoding = 'CP949',
encoding = 'UTF-8')
rm(add19)
add19 = read.csv('data/flow2019상권명.csv',
fileEncoding = 'CP949',
encoding = 'UTF-8')
rm(add19)
add19 = read.csv('data/flow2019상권명.csv')
add19 = read.csv('data/flow2019상권명.csv',
fileEncoding = 'CP949',
encoding = 'UTF-8')
rm(add19)
library(readxl)
add19 = read_excel('data/flow2019상권명.xlsx')
add19
add19[1]
add19(1)
str(add19)
str(add19)[1][1]
add19[1][1]
add19(2,1)
add19[2,1]
add19[3,1]
add19[1,1]
substring(add19[1,1],1,2)
substring(add19[i,1],1,2)=substring(add19[i+1,1],1,2)
substring(add19[1,1],1,2)=substring(add19[2,1],1,2)
substring(add19[1,1],1,2)
substring(add19[2,1],1,2)
substring(add19[1,1],1,2) = substring(add19[2,1],1,2)
a = substring(add19[1,1],1,2)
b = substring(add19[2,1],1,2)
a =b
b = substring(add19[2,1],1,2)
b = substring(add19[3,1],1,2)
grepl(a ,b)
grepl(substring(add19[1,1],1,2) ,substring(add19[3,1],1,2))
for (i in 2:length(add19)) {
ifelse (grepl(substring(add19[i,1],1,2),substring(add19[i-1,1],1,2)),"",add19[i,1])
}
head(add19)
head(add19, n = 20)
add19_test = head(add19, n = 20)
for (i in 2:length(add19_test)) {
add19_test[i,1] = add19_test[i-1,1]
}
length(add19_test)
length(add19_test[1])
add19_test
length(add19_test[1,])
length(add19_test[,1])
length(add19_test[1,1])
ncol(add19_test)
nrow(add19_test)
for (i in 2:nrow(add19_test)) {
add19_test[i,1] = add19_test[i-1,1]
}
add19_test
#테스트
add19_test = head(add19, n = 20)
add19_test
#상권명 앞 두 글자가 같으면 데이터 프레임 삭제하는 것이 목표
for (i in 2:ncol(add19)) {
ifelse (grepl(substring(add19[i,1],1,2),substring(add19[i-1,1],1,2)),"",add19[i,1])
}
add19
for (i in 2:nrow(add19_test)) {
ifelse (grepl(substring(add19[i,1],1,2)=substring(add19[i-1,1],1,2)),"",add19[i,1])
}
grepl(substring(add19[1,1],1,2) ,substring(add19[3,1],1,2))
for (i in 2:nrow(add19_test)) {
grepl(substring(add19[i,1],1,2),substring(add19[i-1,1],1,2))
}
i
add19_test
for (i in 2:nrow(add19_test)) {
ifelse(grepl(substring(add19[i,1],1,2),substring(add19[i-1,1],1,2)),add19_test = 0,1)
}
for (i in 2:nrow(add19_test)) {
c[i]= substring(add19_test[i,1],1,2)
}
for (i in 2:nrow(add19_test)) {
a = substring(add19_test[i,1],1,2)
c[i]= a
}
for (i in 2:nrow(add19_test)) {
a = substring(add19_test[i,1],1,2)
}
a
add19_test
a
a = c(1,2,3,4)
a
a[1]
a[2]
for (i in 1:10){
a[i] = i
}
a
for (i in 1:10){
a[i] = substring(add19_test[i,1],1,2)
}
a
for (i in 2:10){
if(a[i-1]=a[i],b[i]=1,b[i]=0 )
}
for (i in 2:10){
ifelse(a[i-1]=a[i], b[i]=1,b[i]=0 )
}
for (i in 2:10){
ifelse(a[i-1]=a[i], b[i]=1,b[i]=0 )
}
for (i in 2:10){
ifelse(a[i-1]=a[i], b[i]=1,b[i]=0 )
}
for (i in 2:10){
j = i-1
ifelse(a[i]=a[j], b[i]=1,b[i]=0 )
}
ifelse(a[i]=a[j], b[i]=1,b[i]=0 )}
ifelse{a[i]=a[j], b[i]=1,b[i]=0 }}
for (i in 2:nrow(add19_test)) {
a = substring(add19_test[i,1],1,2)
}
a
for (i in 2:nrow(add19_test)) {
a[i] = substring(add19_test[i,1],1,2)
}
a
a[i]=a[i+1]
a
a[1]=a[2]
a[1]==a[2]
substring(add19[i,1],1,2)==substring(add19[i-1,1],1,2)
substring(add19[i-1,1],1,2)}
#상권명 앞 두 글자가 같으면 데이터 프레임 삭제하는 것이 목표
for (i in 2:ncol(add19)) {
ifelse (grepl(substring(add19[i,1],1,2),substring(add19[i-1,1],1,2)),"",add19[i,1])
}
add19
#상권명 앞 두 글자가 같으면 데이터 프레임 삭제하는 것이 목표
for (i in 2:ncol(add19)) {
x = substring(add19[i,1],1,2)
y = substring(add19[i-1,1],1,2)
ifelse ((x==y),(add19[i,1]=""),add19[i,1])
}
add19
for (i in 2:ncol(add19_test)) {
x = substring(add19_test[i,1],1,2)
y = substring(add19_test[i-1,1],1,2)
x
y
#ifelse ((x==y),(add19[i,1]=""),add19[i,1])
}
add19_test
add19_test = head(add19, n = 2)
add19test
add19_test
add19_test = head(add19, n = 2)
add19_test
add19
add19 = read_excel('data/flow2019상권명.xlsx')
#상권명 앞 두 글자가 같으면 데이터 프레임 삭제하는 것이 목표
for (i in 2:ncol(add19)) {
x = substring(add19[i,1],1,2)
y = substring(add19[i-1,1],1,2)
ifelse ((x==y),(add19[i,1]=x),add19[i,1])
}
add19
ncol(add19)
add19 = read_excel('data/flow2019상권명.xlsx')
ncol(add19[1])
nrow(add19[1])
#상권명 앞 두 글자가 같으면 데이터 프레임 삭제하는 것이 목표
for (i in 2:nrow(add19)) {
x = substring(add19[i,1],1,2)
y = substring(add19[i-1,1],1,2)
ifelse ((x==y),(add19[i,1]=x),add19[i,1])
}
add19[1]
nchar(add19[1,1])
nchar(add19[1,2])
nchar(add19[2,1])
# 행의 길이가 2이면 null
for (i in 2:nrow(add19)) {
x = add19[i,1]
ifelse (nchar(x)==2, add19[i,1]= NA, add19[i,1])
}
# 행의 길이가 2이면 null
for (i in 2:nrow(add19)) {
x = add19[i,1]
ifelse ((nchar(x)==2), (add19[i,1]= NA), add19[i,1])
}
add19
add19 %>% filter(!is.na.data.frame())
library(dplyr)
add19 %>% filter(!is.na.data.frame())
add19 %>% filter(!is.na)
na.omit(add19)
## 18년 ↓
for (i in 2:nrow(add18)) {
x = substring(add18[i,1],1,2)
y = substring(add18[i-1,1],1,2)
ifelse ((x==y),(add18[i,1]=x),add18[i,1])
}
for (i in 2:nrow(add18)) {
x = add18[i,1]
ifelse ((nchar(x)==2), (add18[i,1]= NA), add18[i,1])
}
# null 값 데이터 제거
na.omit(add18)
# null 값 데이터 제거
add19 = na.omit(add19)
# null 값 데이터 제거
add18 = addna.omit(add18)
# null 값 데이터 제거
add18 = na.omit(add18)
## 14~ 17년 ↓
for (i in 2:nrow(add1417)) {
x = substring(add1417[i,1],1,2)
y = substring(add1417[i-1,1],1,2)
ifelse ((x==y),(add1417[i,1]=x),add1417[i,1])
}
for (i in 2:nrow(add1417)) {
x = add1417[i,1]
ifelse ((nchar(x)==2), (add1417[i,1]= NA), add1417[i,1])
}
# null 값 데이터 제거
add1417 = na.omit(add1417)
rm(add19_test)
#
head(add1417)
add_total = rbind.data.frame(add1417,add18,add19)
add_total = rbind.data.frame(add1417,add18)
# 데이터 행결합
head(add1417)
head(add18)
head(add19)
# 데이터 행결합
str(add1417)
str(add18)
str(add19)
names(add19)
names(add18)
names(add1417)
names(add1417)[1] <- c("trdar_cd_nm")
names(add1417)
add_total = rbind.data.frame(add1417,add18)
add_total = rbind.data.frame(add_total,add19)
# add_total의 중복 행 제거
View(add_total)
# 가나다순으로 재배열
add_test = head(add_total,n = 10)
add_test
order(add_test)
order(add_test[1,])
order(add_test[1])
add_test %>% arrange(trdar_cd_nm)
add_test
a = c('x', 'y', 'a','b','c')
a %>% arrange(a)
add_test
add_total %>% arrange(trdar_cd_nm)
add_total <- add_total %>% arrange(trdar_cd_nm)
# 중복 데이터값 다시 제거
for (i in 2:nrow(add_total)) {
x = substring(add_total[i,1],1,2)
y = substring(add_total[i-1,1],1,2)
ifelse ((x==y),(add_total[i,1]=x),add_total[i,1])
}
for (i in 2:nrow(add_total)) {
x = add_total[i,1]
ifelse ((nchar(x)==2), (add_total[i,1]= NA), add_total[i,1])
}
add_total
# null 값 데이터 제거
add_total = na.omit(add_total)
add_total
for (i in 2:nrow(add_total)) {
x = add_total[i,1]
ifelse ((nchar(x)==2), (add_total[i,1]= NA), add_total[i,1])
}
add_total
add_total <- add_total %>% arrange(trdar_cd_nm)
add_total
# 중복 데이터값 제거 함수 dropduplicate
add_total.drop_duplicates()
add_total = add_total[-which(duplicated(add_total$trdar_cd_nm)),]
rm(c)
add_total
nrow(add_total)
add_total = as.data.frame(add_total)
add_total
# 중복 데이터값 다시 제거
for (i in 2:nrow(add_total)) {
x = substring(add_total[i,1],1,2)
y = substring(add_total[i-1,1],1,2)
ifelse ((x==y),(add_total[i,1]=x),add_total[i,1])
}
for (i in 2:nrow(add_total)) {
x = add_total[i,1]
ifelse ((nchar(x)==2), (add_total[i,1]= NA), add_total[i,1])
}
# null 값 데이터 제거
add_total = na.omit(add_total)
add_total
# 중복 데이터값 다시 제거
for (i in 2:nrow(add_total)) {
x = substring(add_total[i,1],1,2)
y = substring(add_total[i-1,1],1,2)
ifelse ((x==y),(add_total[i,1]=x),add_total[i,1])
}
# null 값 데이터 제거
add_total = na.omit(add_total)
add_total
# 중복 데이터값 다시 제거
for (i in 2:nrow(add_total)) {
x = substring(add_total[i,1],1,2)
y = substring(add_total[i-1,1],1,2)
ifelse ((x==y),(add_total[i,1]=x),add_total[i,1])
}
# null 값 데이터 제거
add_total = na.omit(add_total)
# 중복 데이터값 다시 제거
for (i in 2:nrow(add_total)) {
x = substring(add_total[i,1],1,2)
y = substring(add_total[i-1,1],1,2)
ifelse ((x==y),(add_total[i,1]=x),add_total[i,1])
}
for (i in 2:nrow(add_total)) {
x = add_total[i,1]
ifelse ((nchar(x)==2), (add_total[i,1]= NA), add_total[i,1])
}
# null 값 데이터 제거
add_total = na.omit(add_total)
add_total
# csv 파일로 저장한다
write.csv(add_total,'data/addtotal.csv')
# csv 파일로 저장한다
write.csv(add_total,'data/addtotal.csv')
# csv 파일로 저장한다
write.csv(add_total,'data/add_total.csv')
# 전처리2 기존 주소 프레임을 앞 2글자를 따로 떼어냄
rm(list = ls())
setwd ('C:/dev/R-project1')
#데이터프레임 가져오기
add1417 = read.csv('data/flow201417상권명.csv')
add18 = read.csv('data/flow2018상권명.csv')
add19 = read_excel('data/flow2019상권명.xlsx')
#서울 지도 시각화
rm(list=ls())
setwd ('C:/dev/R-project1') # 프로젝트 폴더 변경
map <- shapefile('dongmaps/TL_SCCO_EMD.shp')# 지리 정보 자료/201703 / 읍면동
library(ggmap)
library(ggplot2)
library(raster)
library(rgeos)
library(maptools)
library(rgdal)
map <- shapefile('dongmaps/TL_SCCO_EMD.shp')# 지리 정보 자료/201703 / 읍면동
map@polygons[[1]]@Polygons[[1]]@coords %>%  head(n=10L) # 10행까지 좌표 확인
map <- spTransform(map, CRSobj = CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# 여기서 에러
map <- gBuffer(map, byid=TRUE, width=0)
new_map <- fortify(map,region = 'EMD_CD') # fortify 함수로 map을 data-frame으로 변환. EMD_CD 칼럼이 id로 변환됨
View(new_map)
library(ggmap)
View(add1417)
# 전처리2 기존 주소 프레임을 앞 2글자를 따로 떼어냄
rm(list = ls())
# 전처리2 기존 주소 프레임을 앞 2글자를 따로 떼어냄
rm(list = ls())
#데이터프레임 가져오기
add1417 = read.csv('data/flow201417상권명.csv')
add18 = read.csv('data/flow2018상권명.csv')
add19 = read_excel('data/flow2019상권명.xlsx')
View(add1417)
#데이터 프레임 옆에 도로명 '앞2글자' id 칼럼 생성
add19_test <- head(add19,n=10)
add19_test <- cbind(add19_test,'한글id',substring(add19_test,1,2))
add19_test
#데이터 프레임 옆에 도로명 '앞2글자' id 칼럼 생성
add19_test <- head(add19,n=10)
add19_test <- cbind(add19_test,'한글id',substring(add19_test$trdar_cd_nm,1,2))
add19_test
#데이터 프레임 옆에 도로명 '앞2글자' id 칼럼 생성
add19_test <- head(add19,n=10)
add19_test <- cbind(add19_test,substring(add19_test$trdar_cd_nm,1,2))
add19_test
#데이터 프레임 옆에 도로명 '앞2글자' id 칼럼 생성
add19_test <- head(add19,n=10)
add19_test <- cbind(add19_test,한글id=substring(add19_test$trdar_cd_nm,1,2))
add19_test
add19 <- cbind(add19,한글id=substring(add19$trdar_cd_nm,1,2))
head(add19$한글id)
add18 <- cbind(add18,한글id=substring(add18$trdar_cd_nm,1,2))
head(add18$한글id)
add1417 <- cbind(add1417,한글id=substring(add1417$trdar_cd_nm,1,2))
head(add1417$한글id)
View(add1417)
str(add1417)
names(add1417)[1] <- c("trdar_cd_nm")
add1417 <- cbind(add1417,한글id=substring(add1417$trdar_cd_nm,1,2))
head(add1417$한글id)
# 좌표 데이터 프레임 가져오기
coordinate <- read.csv('data/주소/add_total_fin.shp.csv')
# 좌표 데이터 프레임 가져오기
coordinate <- read.csv('data/주소/add_total_fin.shp.csv')
# 좌표 데이터 프레임 가져오기
coordinate <- read_excel('data/주소/add_total_fin.shp.xlsx')
View(coordinate)
# join 하자
left_join(add19_test,coordinate,by = "한글id")
left_join(add19_test,coordinate,by = "한글id")
left_join(add19_test,coordinate,by = "한글id")
left_join(add19,coordinate,by = "한글id")
left_join(add19,coordinate,by = "한글id")
left_join(add18,coordinate,by = "한글id")
left_join(add1417,coordinate,by = "한글id")
write.csv(add19,'data/add19_coord.csv')
write.csv(add18,'data/add18_coord.csv')
write.csv(add1417,'data/add1417_coord.csv')
rm(list = ls())
setwd ('C:/dev/R-project1')
seoulflow19 <- read.csv(file = 'data/flow2019.csv')
head(seoulflow19)
str(seoulflow19)
rm(list = ls())
setwd ('C:/dev/R-project1')
seoulflow19 <- read.csv(file = 'data/flow2019.csv')
seoulflow18 <- read.csv(file = 'data/flow2018.csv')
seoulflow1417 <- read.csv(file = 'data/flow201417.csv')
seoulflow1417 <- read_excel(file = 'data/flow201417.csv')
seoulflow1417 <- read_excel(file = 'data/flow201417.xlsx')
library(readxl)
seoulflow1417 <- read_excel(file = 'data/flow201417.xlsx')
seoulflow1417 <- read_excel(file = 'data/flow201417.xlsx')
seoulflow1417 <- read_excel(file = 'data/flow201417.xlsx')
readxl
seoulflow1417 <- read_excel(file = 'data/flow201417.xlsx')
seoulflow1417 <- read_excel(file = 'data/flow201417.xlsx')
seoulflow1417 <- read_excel(file = 'data/flow201417.xlsx')
install.packages(c("backports", "boot", "covr", "data.table", "digest", "gdtools", "htmltools", "htmlwidgets", "insight", "KernSmooth", "later", "mgcv", "nlme", "pkgbuild", "promises", "purrr", "rmarkdown", "RWeka", "RWekajars", "shiny", "xfun"))
seoulflow1417 <- read_excel(file = 'data/flow201417.xlsx')
seoulflow1417 <- read.csv(file = 'data/flow201417.csv')
seoulflow1417 <- read.csv(file = 'data/flow201417.csv', fileEncoding = "euc-kr")
seoulflow1417 <- read_excel(file = 'data/flow201417.xlsx', fileEncoding = "euc-kr")
View(seoulflow1417)
seoulflow1417 <- read_excel(file = 'data/flow201417.xlsx')
seoulflow1417 <- read_excel('data/flow201417.xlsx')
View(seoulflow1417)
seoulflow17 <- read_excel('data/flow201417.xlsx')
seoulflow17 <- read_excel('data/flow201417.xlsx') # 2014 ~ 2017 데이터
rm(seoulflow1417)
rm(list = ls())
setwd ('C:/dev/R-project1')
flowlist <- dir("./flowdata/")
flowlist
flow_nm <- substr(flowlist,1,nchar(flowlist))
flow_nm
rm(flow_nm)
for (iVar in seq_along(flowlist)) {
assign(flowlist[iVar], read_excel("./flowdata/",flowlist[iVar]))
}
rm(list = ls())
setwd ('C:/dev/R-project1')
seoulflow19 <- read_excel("flowdata/flow2019.xlsx")
seoulflow18 <- read_excel("flowdata/flow2018.xlsx")
seoulflow17 <- read_excel("flowdata/flow201417.xlsx")
head(seoulflow19)
str(seoulflow19)
str(seoulflow19)
str(seoulflow18)
str(seoulflow17)
ls()
flow_nm <- dir("./flowdata/")
flow_nm
rm(list = ls())
flow_nm <- dir("./flowdata/")
seoulflow19 <- read_excel("flowdata/flow2019.xlsx")
seoulflow18 <- read_excel("flowdata/flow2018.xlsx")
seoulflow17 <- read_excel("flowdata/flow201417.xlsx")
flow_nm[1]
flow_nm = flow_nm[-1]
flow_nm
flow_nm
rm(list = ls())
setwd ('C:/dev/R-project1')
flow_nm <- dir("./flowdata/")
#
assign(flow_nm[1], read_excel("flowdata/flow2019.xlsx"))
flow_nm = flow_nm[-1]
flow_nm
#
assign(flow_nm[1], read_excel("flowdata/flow201417.xlsx"))
assign(flow_nm[2], read_excel("flowdata/flow2018.xlsx"))
assign(flow_nm[3], read_excel("flowdata/flow2019.xlsx"))
str(flow_nm[1])
ls()
for (iVar in flow_nm) {
cat(iVar,"->", dim(get(iVar))[1],"행",dim(get(iVar))[2],"열", "\n")
}
str(flow2018.xlsx)
for (iVar in flow_nm_age) {
cat(iVar,"->", names(get(iVar)), "\n")
}
for (iVar in flow_nm) {
cat(iVar,"->", names(get(iVar)), "\n")
}

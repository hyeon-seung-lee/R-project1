color = ~flow18_color(group), fillOpacity = 0.5) %>%
addMarkers( lng = ~lon,lat = ~lat,
options = popupOptions(closeButton = FALSE), data = flow18_center_denorm,
popup = popup
)
leaflet(main_trade_area) %>% addTiles() %>%
addPopups(main_trade_area$lon,main_trade_area$lat, main_trade_area$area_name,
options = popupOptions(closeButton = FALSE))
load("save/main_trade_area.rdata")
leaflet(main_trade_area) %>% addTiles() %>%
addPopups(main_trade_area$lon,main_trade_area$lat, main_trade_area$area_name,
options = popupOptions(closeButton = FALSE))
flow_group_data<- ncol(flow18_center_denorm, area_name )
View(seoul_map)
#서울 지도 시각화
rm(list=ls())
map <- shapefile('dongmaps/TL_SCCO_EMD.shp')# 지리 정보 자료/201703 / 읍면동
map@polygons[[1]]@Polygons[[1]]@coords %>%  head(n=10L) # 10행까지 좌표 확인
map <- spTransform(map, CRSobj = CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'))
# 여기서 에러
map <- gBuffer(map, byid=TRUE, width=0)
new_map <- fortify(map,region = 'EMD_CD') # fortify 함수로 map을 data-frame으로 변환.
# EMD_CD 칼럼이 id로 변환됨
View(new_map)
seoul_map_ggplot <- ggplot() + geom_polygon(data = new_map,
aes(x = long,
y = lat, group=group),
fill = 'white', color = 'black' )
seoul_map_ggplot
View(flow18_wend_tuwen_positive)
#2) 연령별+토,일
#20대, 토,일
library(dplyr)
library(leaflet)
library(schoolmath)
#2018년 20대 주말
cen <- c(126.9894661,	37.53802834)
load('save/flow_color.rdata')
load("save/flow18.rdata")
load("save/subway.rdata")
load('save/flow18_center_denorm.rdata')
flow18_weekend <-flow18[,c(6,101:112,353:364,534:536)]
flow18_weekend_total<-flow18_weekend %>% mutate(total = rowSums(.[1:4040,2:25]))
flow18_weekend_total[,29] <- as.numeric(flow18_weekend_total[,29])
View(flow18_weekend_total)
flow18_tuewedn <-flow18[,c(6,77:88,329:340,534:536)]
flow18_tuewedn_total<-flow18_tuewedn %>% mutate(total = rowSums(.[1:4040,2:25]))
flow18_tuewedn_total[,29] <- as.numeric(flow18_tuewedn_total[,29])
View(flow18_tuewedn_total)
source('C:/dev/R-project1/leaflet04_20대주말화수.r', encoding = 'UTF-8', echo=TRUE)
install.packages("schoolmath")
read.csv(file = 'data/휴지통/everyCoords19.csv')
every19<- read.csv(file = 'data/휴지통/everyCoords19.csv')
every19
every19<- read.csv(file = 'data/휴지통/everyCoords19.csv', encoding = 'UTF-8',stringsAsFactors = F)
every19
View(every19)
#데이터프레임 가져오기
add1417 = read.csv('data/flow201417상권명.csv')
#
flow19 <- read_excel('flowdata/flow2019.xlsx')
#
flow19 <- read_excel('휴지통//flowdata/flow2019.xlsx')
View(flow19)
# google map 이용
# littlemissdata.com 시작
rm(list = ls())
library(data.table)
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library(ggmap)
register_google(key='AIzaSyBQsv4dm2o6hBfchlPQDMpMyRdkLsk-3k8') # 부여받은 키 등록
cen <- c(126.9894661,	37.53802834)
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=13,
size=c(640,640),
color = 'color'))
sgm
load("save/flow19.rdata")
load("save/add_total.rdata")        # 주소
load("save/att_seoul.rdata")        # 서울 명소
load("save/subway.rdata")
# 데이터 프레임에서  전체 유동인구만 선택
flow19_tot_flpop <-   flow19 %>% select(tot_flpop_co,lon,lat)
library(ggplot2)
library(dplyr)
# 데이터 프레임에서  전체 유동인구만 선택
flow19_tot_flpop <-   flow19 %>% select(tot_flpop_co,lon,lat)
# 데이터 프레임에서  전체 유동인구만 선택
flow19_tot_flpop <-   flow19 %>% select(tot_flpop_co,lon,lat)
View(flow19)
library(dplyr)
library(data.table)
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library(ggmap)
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=13,
size=c(640,640),
color = 'color'))
sgm
register_google(key='AIzaSyBQsv4dm2o6hBfchlPQDMpMyRdkLsk-3k8') # 부여받은 키 등록
cen <- c(126.9894661,	37.53802834)
sgm     <-ggmap( get_googlemap(center=cen,
maptype='roadmap',
zoom=13,
size=c(640,640),
color = 'color'))
# 데이터 프레임에서  전체 유동인구만 선택
flow19_tot_flpop <-   flow19 %>% select(tot_flpop_co,lon,lat)
load("save/flow19.rdata")
# 데이터 프레임에서  전체 유동인구만 선택
flow19_tot_flpop <-   flow19 %>% select(tot_flpop_co,lon,lat)
flow18_tot_flpop <-   flow18 %>% select(tot_flpop_co,lon,lat)
flow17_tot_flpop <-   flow17 %>% select(tot_flpop_co,lon,lat)
# load 로드
load("save/flow17.rdata")
load("save/flow18.rdata")
flow18_tot_flpop <-   flow18 %>% select(tot_flpop_co,lon,lat)
flow17_tot_flpop <-   flow17 %>% select(tot_flpop_co,lon,lat)
# sgm (Seoul Google Map)
sgm + geom_point(aes(x = lon, y = lat ), data = flow19_tot_flpop, size = 1.8, alpha=0.35, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat ), data = flow18_tot_flpop, size = 1.8, alpha=0.35, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat ), data = flow17_tot_flpop, size = 1.8, alpha=0.35, color = 'red') +
theme(legend.position="bottom")
load("save/att_seoul.rdata")        # 서울 명소
# 구별 center data 또는 동, 서, 남, 북, 중앙 등의 좌표 데이터
# 주요 관광지 주소와 좌표 데이터
# 상권 주소값 전체에 대한 주소 데이터면 좋음
att_Seoul_df<-as.data.frame(att_seoul)
# 관광지 데이터로 인덱스를 만들어 보자
sgm + geom_point(aes(x = lon, y = lat ), data = flow19_tot_flpop,
size = 1.8, alpha=0.25, color = 'red') +
theme(legend.position="bottom")+
geom_point(aes(x = lon, y = lat, stroke = 2), data = att_Seoul_df, size =1.5) +
geom_label_repel(
aes(x=lon, y=lat, label = seoul_attractions),
data=att_Seoul_df,
#family = 'Times',
size = 2,
box.padding = 0, point.padding = 0,
segment.color = 'grey50')
load('save/flow18_center_denorm.rdata')
load("save/flow18.rdata")
load("save/att_seoul.rdata")        # 서울 명소
load("save/subway.rdata")
load("save/main_trade_area.rdata")
# 변수 선언
cen <- c(126.9894661,	37.53802834)
content <- paste("<a>",flow18$trdar_cd_nm,"</a> : ",
flow18$tot_flpop_co,'</br> group : ',flow18$group)
popup <- paste("Group : ",flow18_center_denorm$no)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=cen[1], lat=cen[2], popup="깃발 말주머니에 들어갈 말") # 깃발 생성
m
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=cen[1], lat=cen[2], popup="깃발 말주머니에 들어갈 말") # 깃발 생성
library(leaflet)
content <- paste("<a>",flow18$trdar_cd_nm,"</a> : ",
flow18$tot_flpop_co,'</br> group : ',flow18$group)
popup <- paste("Group : ",flow18_center_denorm$no)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=cen[1], lat=cen[2], popup="깃발 말주머니에 들어갈 말") # 깃발 생성
m
m %>% addProviderTiles(providers$Stamen.Toner) #흑백
m %>% addProviderTiles(providers$CartoDB.Positron) # 깔끄미
# 1. 명소를 지도에 표시하자
head(att_seoul)
#popup
leaflet(att_seoul) %>% addTiles() %>%
addPopups(att_seoul$lon,att_seoul$lat, att_seoul$seoul_attractions,
options = popupOptions(closeButton = FALSE))
#label -> 선택
leaflet(att_seoul) %>% addTiles() %>%
addMarkers( lng = ~lon,lat = ~lat,popup= ~seoul_attractions,          #'~'가 'att_seoul$'임
options = popupOptions(closeButton = FALSE))
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 11) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = paste(flow18$trdar_cd_nm, flow18$tot_flpop_co),
fillColor = 'red')
# 3. 유동인구와 명소를 함께 표시하자(flow18$총유동인구수)
# 유동인구
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red') %>%
#label -> 선택
addPopups( lng = ~lon,lat = ~lat,popup= ~seoul_attractions,          #'~'가 'att_seoul$'임
options = popupOptions(closeButton = FALSE), data = att_seoul)
library(pracma)
#popup
leaflet(att_seoul) %>% addTiles() %>%
addPopups(att_seoul$lon,att_seoul$lat, att_seoul$seoul_attractions,
options = popupOptions(closeButton = FALSE))
#label -> 선택
leaflet(att_seoul) %>% addTiles() %>%
addMarkers( lng = ~lon,lat = ~lat,popup= ~seoul_attractions,          #'~'가 'att_seoul$'임
options = popupOptions(closeButton = FALSE))
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 11) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = paste(flow18$trdar_cd_nm, flow18$tot_flpop_co),
fillColor = 'red')
# 3. 유동인구와 명소를 함께 표시하자(flow18$총유동인구수)
# 유동인구
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red') %>%
#label -> 선택
addPopups( lng = ~lon,lat = ~lat,popup= ~seoul_attractions,          #'~'가 'att_seoul$'임
options = popupOptions(closeButton = FALSE), data = att_seoul)
# 5. 말주머니 글씨를 멋지게 해보자
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red')
# Clusters option을 표시하자.
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addMarkers( lng = ~lon,lat = ~lat,popup= ~seoul_attractions,          #서울 명소
options = popupOptions(closeButton = FALSE), data = att_seoul,
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F))
# 서울 지하철역과 유동인구를 표시하자
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addMarkers( lng = ~lon,lat = ~lat,popup= ~statn_nm,          #서울 지하철
options = popupOptions(closeButton = FALSE), data = subway
)
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addMarkers( lng = ~lon,lat = ~lat,
options = popupOptions(closeButton = FALSE), data = flow18_center_denorm#,
# popup = ~trdar_cd_nm
)
flow18_color = colorFactor(palette = c('red', 'blue', 'green', 'purple', 'orange'), flow18$group)
content <- paste("<a>",flow18$trdar_cd_nm,"</a> : ",
flow18$tot_flpop_co,'</br> group : ',flow18$group)
popup <- paste("<a>",flow18_center_denorm$name,"</a></br>",'GroupNo : ',flow18_center_denorm$no)
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
color = ~flow18_color(group), fillOpacity = 0.5) %>%
addMarkers( lng = ~lon,lat = ~lat,
options = popupOptions(closeButton = FALSE), data = flow18_center_denorm,
popup = popup
)
leaflet(main_trade_area) %>% addTiles() %>%
addPopups(main_trade_area$lon,main_trade_area$lat, main_trade_area$area_name,
options = popupOptions(closeButton = FALSE))
flow_group_data<- ncol(flow18_center_denorm, area_name )
seoul_attractions<- read_excel('../data/주소/seoul_attractions.xlsx')
library(dplyr)
library(readxl)
library(stringr)
seoul_attractions<- read_excel('../data/주소/seoul_attractions.xlsx')
seoul_attractions
seoul_attractions<- read_excel('data/주소/seoul_attractions.xlsx')
seoul_attractions
#빈칸 제거
seoul_attractions = seoul_attractions %>% filter(!is.na(attraction))
str(seoul_attractions)
n = grep('\\d\\.',seoul_attractions$attraction)
seoul_attractions <-seoul_attractions$attraction[-n]
# 설명 제거
x = c(1:(length(seoul_attractions)/2))
x = c(x*2-1)
seoul_attractions<-seoul_attractions[x]
library(ggmap)
rm(list =ls())
seoul_attractions<- read_excel('data/주소/seoul_attractions.xlsx')
View(seoul_attractions)
#빈칸 제거
seoul_attractions = seoul_attractions %>% filter(!is.na(attraction))
View(seoul_attractions)
knitr::opts_chunk$set(echo = TRUE)
n = grep('\\d\\.',seoul_attractions$attraction)
View(seoul_attractions)
seoul_attractions <-seoul_attractions$attraction[-n]
subway<-read_excel("data/sub_station_name.xlsx")
# 서울 지하철 좌표 추출
rm(list = ls())
library(readxl)
subway<-read_excel("data/sub_station_name.xlsx")
library(dplyr)
library(readxl)
library(stringr)
# 지하철 역 이름 정제
subway$statn_nm <-   subway$statn_nm%>%
str_remove(pattern = '\\(.+\\)') %>%
str_remove('역$') %>%
str_c('역')
load("save/subway.rdata")
View(subway)
rm(list = ls())
# k-means 분석 해보기
# 자주 쓰이는 변수
library(stats)
library(dplyr)
rm(list = ls())
str(flow19)
flow19_km <- flow19 %>%  select(tot_flpop_co,  lon, lat)
load("save/flow19.rdata")
#역정규화
denormalization_lon <- function(x) {
max_str <- max(flow19$lon)
min_str <- min(flow19$lon)
return((x*(max_str-min_str))+min_str)
}
denormalization_lat <- function(x) {
max_str <- max(flow19$lat)
min_str <- min(flow19$lat)
return((x*(max_str-min_str))+min_str)
}
flow19_km <- flow19 %>%  select(tot_flpop_co,  lon, lat)
#좌표값을 위도가 아니라 상대 데이터로 정규화 -> 역정규화를 해야겠다.
normalization <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
flow19_km_n<- as.data.frame(lapply(flow19_km[2:3], normalization) )
flow19_km_n %>% mutate(tot_flpop_co = flow19_km$tot_flpop_co)
#kmeans                여기서 시작
set.seed(12)
flow19_cluster <- kmeans(flow19_km_n,23)
flow19_center <-as.data.frame( flow19_cluster[[2]])
flow19_group_data <-as.data.frame( flow19_cluster[[1]])
flow19_group <- flow19
flow19_group[,536] <- flow19_group_data
names(flow19_group)[536] <- c('group')
flow19_cluster[[2]]
table(flow19_group$group)
flow19_center_denorm_lat<- denormalization_lat(flow19_center$lat)
flow19_center_denorm_lon<- denormalization_lon(flow19_center$lon)
flow19_center_denorm<- as.data.frame(cbind(no = c(1:length(flow19_center_denorm_lat)),
lat = flow19_center_denorm_lat,lon = flow19_center_denorm_lon))
str(flow19)
flow19_km <- flow19 %>%  select(tot_flpop_co,  lon, lat)
# 데이터 확인
str(flow19_km)
#2. k-means 클러스터 생성 -> 할 필요 없음 !
# NA Check & 정제
flow19 %>% filter(is.na(lon))
flow18 %>% filter(is.na(lon))
flow17 %>% filter(is.na(lon))
add_total %>% filter(is.na(lat))
add_total[981,3:4] <- c( 126.930198,37.576169)
flow19_km %>% filter(is.na(lon))
#head(flow19_center_denorm_lon)
flow19_center_denorm<- as.data.frame(cbind(no = c(1:length(flow19_center_denorm_lat)),lat = flow19_center_denorm_lat,lon = flow19_center_denorm_lon))
length(flow19_center_denorm_lat)
# group 컬럼을 추가한 데이터를 만듬
names(flow19_group_data)[1] <- c('group')
length(flow19_group_data[1])
flow19_test <- flow19
flow19_test$group_data <- flow19_group_data[1]
head(flow19_test)
table(flow19_test$group_data)
flow19_test$group
flow19$group
flow19_group<-bind_cols(flow19,flow19_group_data)
#19년도 total 데이터 전처리
#1. Group Data 합계 가능?
rm(list = ls())
library(ggplot2)
library(pracma)
library(leaflet)
library(dplyr)
library(pals)
library(viridis)
library(leaflet)
library(pracma)
load('save/flow18_center_denorm.rdata')
load("save/flow18.rdata")
load("save/att_seoul.rdata")        # 서울 명소
load("save/subway.rdata")
load("save/main_trade_area.rdata")
# 변수 선언
cen <- c(126.9894661,	37.53802834)
content <- paste("<a>",flow18$trdar_cd_nm,"</a> : ",
flow18$tot_flpop_co,'</br> group : ',flow18$group)
popup <- paste("Group : ",flow18_center_denorm$no)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=cen[1], lat=cen[2], popup="깃발 말주머니에 들어갈 말") # 깃발 생성
m
# 1. 명소를 지도에 표시하자
head(att_seoul)
#popup
leaflet(att_seoul) %>% addTiles() %>%
addPopups(att_seoul$lon,att_seoul$lat, att_seoul$seoul_attractions,
options = popupOptions(closeButton = FALSE))
#label -> 선택
leaflet(att_seoul) %>% addTiles() %>%
addMarkers( lng = ~lon,lat = ~lat,popup= ~seoul_attractions,          #'~'가 'att_seoul$'임
options = popupOptions(closeButton = FALSE))
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 11) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = paste(flow18$trdar_cd_nm, flow18$tot_flpop_co),
fillColor = 'red')
# 3. 유동인구와 명소를 함께 표시하자(flow18$총유동인구수)
# 유동인구
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red') %>%
#label -> 선택
addPopups( lng = ~lon,lat = ~lat,popup= ~seoul_attractions,          #'~'가 'att_seoul$'임
options = popupOptions(closeButton = FALSE), data = att_seoul)
# 서울 지하철역과 유동인구를 표시하자
leaflet(flow18) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addMarkers( lng = ~lon,lat = ~lat,popup= ~statn_nm,          #서울 지하철
options = popupOptions(closeButton = FALSE), data = subway
)
#18년도 total 데이터 전처리
#1. Group Data 합계 가능?
rm(list = ls())
load("save/flow18.rdata")
#1 kmeans.
flow18_km <- flow18 %>%  select(tot_flpop_co,  lon, lat)
options = popupOptions(closeButton = FALSE))
#역정규화
denormalization_lon <- function(x) {
max_str <- max(flow18$lon)
min_str <- min(flow18$lon)
return((x*(max_str-min_str))+min_str)
}
denormalization_lat <- function(x) {
max_str <- max(flow18$lat)
min_str <- min(flow18$lat)
return((x*(max_str-min_str))+min_str)
}
#좌표값을 위도가 아니라 상대 데이터로 정규화 -> 역정규화를 해야겠다.
normalization <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
flow18_km_n<- as.data.frame(lapply(flow18_km[2:3], normalization) )
flow18_km_n %>% mutate(tot_flpop_co = flow18_km$tot_flpop_co)
#kmeans                여기서 시작
set.seed(12)
flow18_cluster <- kmeans(flow18_km_n,23)
flow18_center <-as.data.frame( flow18_cluster[[2]])
flow18_group_data <-as.data.frame( flow18_cluster[[1]])
flow18_group <- flow18
flow18_group[,536] <- flow18_group_data
names(flow18_group)[536] <- c('group')
flow18_cluster[[2]]
table(flow18_group$group)
flow18_center_denorm_lat<- denormalization_lat(flow18_center$lat)
flow18_center_denorm_lon<- denormalization_lon(flow18_center$lon)
flow18_center_denorm<- as.data.frame(cbind(no = c(1:length(flow18_center_denorm_lat)),
lat = flow18_center_denorm_lat,
lon = flow18_center_denorm_lon))
View(flow18_center_denorm)
load('save/flow18_center_denorm.rdata')
View(flow18_center_denorm)
load("save/main_trade_area.rdata")
View(main_trade_area)
#2018년 20대, 주말 - (화,수) 차이가 가장 큰 곳을 나타내기
rm(list = ls())
#2) 연령별+토,일
#20대, 토,일
library(dplyr)
library(leaflet)
library(schoolmath)
#2018년 20대 주말
cen <- c(126.9894661,	37.53802834)
load('save/flow_color.rdata')
load("save/flow18.rdata")
load("save/subway.rdata")
load('save/flow18_center_denorm.rdata')
flow18_weekend <-flow18[,c(6,101:112,353:364,534:536)]
flow18_weekend_total<-flow18_weekend %>% mutate(total = rowSums(.[1:4040,2:25]))
str(flow18_weekend_total)
View(flow18_weekend)
load("save/add_total.rdata")        # 주소
View(add_total)

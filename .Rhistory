# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addMarkers( lng = ~lon,lat = ~lat,          #서울 지하철
options = popupOptions(closeButton = FALSE), data = flow19_center_denorm
)
#kmeans
flow19_cluster <- kmeans(flow19_km_n,23)
flow19_center <-as.data.frame( flow19_cluster[[2]])
#kmeans
flow19_cluster <- kmeans(flow19_km_n,23)
flow19_km <- flow19 %>%  select(tot_flpop_co,  lon, lat)
#좌표값을 위도가 아니라 상대 데이터로 정규화 -> 역정규화를 해야겠다.
normalization <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
flow19_km_n<- as.data.frame(lapply(flow19_km[2:3], normalization) )
#좌표값을 위도가 아니라 상대 데이터로 정규화 -> 역정규화를 해야겠다.
normalization <- function(x) {
return((x - min(x)) / (max(x) - min(x)))
}
flow19_km_n<- as.data.frame(lapply(flow19_km[2:3], normalization) )
flow19_km_n %>% mutate(tot_flpop_co = flow19_km$tot_flpop_co)
#kmeans
flow19_cluster <- kmeans(flow19_km_n,23)
flow19_center <-as.data.frame( flow19_cluster[[2]])
#역정규화
denormalization_lon <- function(x) {
max_str <- max(flow19$lon)
min_str <- min(flow19$lon)
return((x*(max_str-min_str))+min_str)
}
denormalization_lat <- function(x) {
max_str <- max(flow19$lat)
min_str <- min(flow19$lat)
return((x*(max_str-min_str))+min_str)
}
flow19_center_denorm_lat<- denormalization_lat(flow19_center$lat)
flow19_center_denorm_lon<- denormalization_lon(flow19_center$lon)
flow19_center_denorm<- as.data.frame(cbind(lat = flow19_center_denorm_lat,lon = flow19_center_denorm_lon))
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addMarkers( lng = ~lon,lat = ~lat,          #서울 지하철
options = popupOptions(closeButton = FALSE), data = flow19_center_denorm
)
flow19_center_denorm<- as.data.frame(cbind(lat = flow19_center_denorm_lat,lon = flow19_center_denorm_lon))
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addMarkers( lng = ~lon,lat = ~lat,          #서울 지하철
options = popupOptions(closeButton = FALSE), data = flow19_center_denorm
)
# knn(Nearest Neighbor)
rm(list = ls())
library(readxl)
#1. main_trade_area 로부터 각 센터값 가져오기기
main_trade_area <- read_excel('data/main_trade_area.xlsx')
View(main_trade_area)
#1. main_trade_area 로부터 각 센터값 가져오기기
main_trade_area <- read_excel('data/main_trade_area.xlsx')
load("save/flow19.rdata")
View(flow19)
#2. flow19 데이터로부터 도로명과 좌표값 가져온 데이터프레임 생성
str(flow19)
flow19_km <- flow19 %>%  select(trdar_cd_nm  ,  lon, lat)
rm(flow19_km)
flow19_knn <- flow19 %>%  select(trdar_cd_nm  ,  lon, lat)
flow19_knn %>% filter(is.na())
flow19_knn %>% filter(is.na(lat))
View(flow19_knn)
View(main_trade_area)
names(main_trade_area)[3] <- c("trdar_cd_nm")
rbind(flow19_knn,main_trade_area)
View(main_trade_area)
View(flow19_knn)
View(main_trade_area)
names(main_trade_area)[4] <- c("trdar_cd_nm")
names(main_trade_area)[3] <- c("lon")
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addMarkers( lng = ~lon,lat = ~lat,          #서울 지하철
options = popupOptions(closeButton = FALSE), data = main_trade_area,
popup = trdar_cd_nm
)
# 변수 선언
cen <- c(126.9894661,	37.53802834)
content <- content <- paste("<a>",flow19$trdar_cd_nm,"</a> : ",
flow19$tot_flpop_co)
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addMarkers( lng = ~lon,lat = ~lat,          #서울 지하철
options = popupOptions(closeButton = FALSE), data = main_trade_area,
popup = trdar_cd_nm
)
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addMarkers( lng = ~lon,lat = ~lat,          #서울 지하철
options = popupOptions(closeButton = FALSE), data = main_trade_area,
popup = ~trdar_cd_nm
)
library(class)
#3. 훈련용 데이터 프레임 만들기 : 일단 클러스터 중심 하나로 돌려보기
main_trade_area_train <- main_trade_area[,2:3]
main_trade_area_label <- main_trade_area[,1]
View(main_trade_area_label)
View(main_trade_area_train)
View(flow19)
flow19_knn_test <- flow19[,534:535]
cluster_knn= knn(train = main_trade_area_train,
test = flow19_knn_test,
cl = main_trade_area_label,
k = 3
)
View(main_trade_area_label)
View(main_trade_area)
str(main_trade_area_label)
str(main_trade_area_test)
str(main_trade_area_test)
str(main_trade_area_train)
cluster_knn= knn(train = main_trade_area_train,
test = flow19_knn_test,
cl = main_trade_area_label,
k = 3
)
cluster_knn= knn(train = main_trade_area_train,
test = flow19_knn_test,
cl = main_trade_area_label,
k = 3
)
main_trade_area_label <- as.vector.factor(main_trade_area[,1])
str(main_trade_area_label)
length(main_trade_area_label)
main_trade_area_label <- as.vector(main_trade_area[,1])
str(main_trade_area_label)
main_trade_area_label <- main_trade_area[,1, drop = T]
cluster_knn= knn(train = main_trade_area_train,
test = flow19_knn_test,
cl = main_trade_area_label,
k = 3
)
cluster_knn
cluster_knn_df <- as.data.frame(cluster_knn)
View(cluster_knn_df)
cbind(flow19,cluster_knn_df)
flow19<-cbind(flow19,cluster_knn_df)
# first 20 quakes
rm(list = ls())
df.20 <- quakes[1:20,]
getColor <- function(quakes) {
sapply(quakes$mag, function(mag) {
if(mag <= 4) {
"green"
} else if(mag <= 5) {
"orange"
} else {
"red"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
df.20 <- quakes[1:10,]
getColor <- function(quakes) {
sapply(quakes$mag, function(mag) {
if(mag <= 4) {
"green"
} else if(mag <= 5) {
"orange"
} else {
"red"
} })
}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(df.20)
)
leaflet(df.20) %>% addTiles() %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(mag))
load("save/flow19.rdata")
#1. main_trade_area 로부터 각 센터값 가져오기기
main_trade_area <- read_excel('data/main_trade_area.xlsx')
flow19_knn <- flow19 %>%  select(trdar_cd_nm  ,  lon, lat)
names(main_trade_area)[4] <- c("trdar_cd_nm")
names(main_trade_area)[3] <- c("lon")
#3. 훈련용 데이터 프레임 만들기 : 일단 클러스터 중심 하나로 돌려보기
main_trade_area_train <- main_trade_area[,2:3]
main_trade_area_label <- main_trade_area[,1, drop = T]
flow19_knn_test <- flow19[,534:535]
cluster_knn= knn(train = main_trade_area_train,
test = flow19_knn_test,
cl = main_trade_area_label,
k = 3
)
cluster_knn_df <- as.data.frame(cluster_knn)
flow19<-cbind(flow19,cluster_knn_df)
# load
load("save/flow17.rdata")
load("save/flow18.rdata")
flow18_knn <- flow18 %>%  select(trdar_cd_nm  ,  lon, lat)
flow18_knn_test <- flow18[,534:535]
cluster_knn= knn(train = main_trade_area_train,
test = flow18_knn_test,
cl = main_trade_area_label,
k = 3
)
flow18<-cbind(flow18,cluster_knn_df)
flow17_knn <- flow17 %>%  select(trdar_cd_nm  ,  lon, lat)
flow17_knn_test <- flow17[,534:535]
cluster_knn= knn(train = main_trade_area_train,
test = flow17_knn_test,
cl = main_trade_area_label,
k = 3
)
flow18<-cbind(flow17,cluster_knn_df)
flow17<-cbind(flow17,cluster_knn_df)
save(flow17,file = 'save/flow17.rdata')
save(flow19,file = 'save/flow19.rdata')
load("save/flow18.rdata")
cluster_knn= knn(train = main_trade_area_train,
test = flow18_knn_test,
cl = main_trade_area_label,
k = 3
)
flow18<-cbind(flow18,cluster_knn_df)
save(flow18,file = 'save/flow18.rdata')
View(flow18)
quakes[1:30,]
df.20
str(df.20)
getColor <- function(flow19) {
sapply(flow19$group, function(group) {
if(group%%7 = 0) {
"red"
} else if(group%%7 = 1) {
"orange"
} else if(group%%7 = 2) {
"yellow"
}else if(group%%7 = 3) {
"green"
}else if(group%%7 = 4) {
"blue"
}else if(group%%7 = 5) {
"violet"
}else(group%%7 = 6) {
"navy"
}
})
}
getColor <- function(flow19) {
sapply(flow19$group, function(group) {
if(group%%7 = 0) {
"red"
} else if(group%%7 = 1) {
"orange"
} else if(group%%7 = 2) {
"yellow"
}else if(group%%7 = 3) {
"green"
}else if(group%%7 = 4) {
"blue"
}else if(group%%7 = 5) {
"violet"
}else(group%%7 = 6) {
"navy"
}   })
}
View(getColor)
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(flow19)
)
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(group), data = flow19)
# 변수 선언
cen <- c(126.9894661,	37.53802834)
content <- content <- paste("<a>",flow19$trdar_cd_nm,"</a> : ",
flow19$tot_flpop_co)
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(group), data = flow19)
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addAwesomeMarkers(~lon, ~lat, icon=icons, label=~as.character(group), data = flow19)
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addAwesomeMarkers(~lon, ~lat, icon=icons, label=~as.character(flow19$group), data = flow19)
if(group%%7 = 0) {
"red"
} else if(group%%7 = 1) {
"orange"
} else if(group%%7 = 2) {
"yellow"
}else if(group%%7 = 3) {
"green"
}else if(group%%7 = 4) {
"blue"
}else if(group%%7 = 5) {
"violet"
}else(group%%7 = 6) {
"navy"
}   })}
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addAwesomeMarkers(~lon, ~lat, icon=icons, label=~as.character(flow19$group), data = flow19)
flow19_group <- flow19$group[drop = T]
if(group%%7 = 0) {
"red"
} else if(group%%7 = 1) {
"orange"
} else if(group%%7 = 2) {
"yellow"
}else if(group%%7 = 3) {
"green"
}else if(group%%7 = 4) {
"blue"
}else if(group%%7 = 5) {
"violet"
}else(group%%7 = 6) {
"navy"
}   })}
# Cluster Center(20곳)과 유동인구를 표시하자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%                      #지도 초기값
addCircles(lng = ~lon, lat = ~lat, weight = 1,                          #유동인구
radius = (~nthroot(tot_flpop_co,3)*2.3), popup = content,
fillColor = 'red',color = NA, fillOpacity = 0.3) %>%
addAwesomeMarkers(~lon, ~lat, icon=icons, label=~as.character(flow19$group), data = flow19)
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red') %>%
#label -> 선택
addPopups( lng = ~lon,lat = ~lat,popup= ~seoul_attractions,          #'~'가 'att_seoul$'임
options = popupOptions(closeButton = FALSE), data = att_seoul)
load("save/att_seoul.rdata")        # 서울 명소
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red') %>%
#label -> 선택
addPopups( lng = ~lon,lat = ~lat,popup= ~seoul_attractions,          #'~'가 'att_seoul$'임
options = popupOptions(closeButton = FALSE), data = att_seoul)
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red')
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red', group = group)
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red', group = ~group)
View(flow19)
View(flow18)
names(flow17)[536] <- c("group")
names(flow18)[536] <- c("group")
names(flow19)[536] <- c("group")
save(flow17,file = 'save/flow17.rdata')
save(flow18,file = 'save/flow18.rdata')
save(flow19,file = 'save/flow19.rdata')
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red', group = ~group)
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red', group = ~group, color = 'black')
group_color = colorFactor('Set1', flow19$group)
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red', group = ~group_color(group))
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red', color = ~group_color(group))
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fill = ~group_color(group))
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
color = ~group_color(group))
getColor <- function(flow19_group) {
sapply(flow19_group$group, function(group) {
if(group%%7 = 0) {
"red"
} else if(group%%7 = 1) {
"orange"
} else if(group%%7 = 2) {
"yellow"
}else if(group%%7 = 3) {
"green"
}else if(group%%7 = 4) {
"blue"
}else if(group%%7 = 5) {
"violet"
}else(group%%7 = 6) {
"navy"
}   })}
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(flow19)
)
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red') %>%
addAwesomeMarkers(~long, ~lat, icon=icons, label=~as.character(group), data = flow19)
# 유동인구를 그룹별로 나누자
leaflet(flow19) %>% addTiles() %>%
setView(lng = cen[1], lat = cen[2], zoom = 12) %>%
addCircles(lng = ~lon, lat = ~lat, weight = 1,
radius = (~nthroot(tot_flpop_co,3)*2.5), popup = content,
fillColor = 'red') %>%
addAwesomeMarkers(~lon, ~lat, icon=icons, label=~as.character(group), data = flow19)
cluster_knn= knn(train = main_trade_area_train,
test = flow18_knn_test,
cl = main_trade_area_label,
k = 5
)
cluster_knn_df <- as.data.frame(cluster_knn)
View(cluster_knn_df)
cbind(flow18,cluster_knn_df)
flow18_bind <- cbind(flow18,cluster_knn_df)
View(flow18_bind)
#flow18<-cbind(flow18,cluster_knn_df)
flow18_bind[trdar_cd_nm,cluster_knn]
#flow18<-cbind(flow18,cluster_knn_df)
flow18_bind %>% select(cluster_knn,trdar_cd_nm)
